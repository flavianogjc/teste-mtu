// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mtu.Rentals.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mtu.Rentals.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905140628_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Mtu.Rentals.Domain.Entities.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("CnhImagePath")
                        .HasColumnType("text")
                        .HasColumnName("cnh_image_path");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnh_number");

                    b.Property<int>("CnhType")
                        .HasColumnType("integer")
                        .HasColumnName("cnh_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_couriers");

                    b.HasIndex("CnhNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_couriers_cnh_number");

                    b.ToTable("couriers", (string)null);
                });

            modelBuilder.Entity("Mtu.Rentals.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_motorcycles");

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("Mtu.Rentals.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourierId")
                        .HasColumnType("uuid")
                        .HasColumnName("courier_id");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_rate");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_date");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("motorcycle_id");

                    b.Property<int>("Plan")
                        .HasColumnType("integer")
                        .HasColumnName("plan");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("return_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("Mtu.Rentals.Infrastructure.Persistence.MotorcycleNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("motorcycle_id");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_motorcycle_notifications");

                    b.HasIndex("MotorcycleId")
                        .IsUnique()
                        .HasDatabaseName("ix_motorcycle_notifications_motorcycle_id");

                    b.ToTable("motorcycle_notifications", (string)null);
                });

            modelBuilder.Entity("Mtu.Rentals.Domain.Entities.Courier", b =>
                {
                    b.OwnsOne("Mtu.Rentals.Domain.Entities.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("CourierId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Digits")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("CourierId");

                            b1.HasIndex("Digits")
                                .IsUnique()
                                .HasDatabaseName("ix_couriers_cnpj");

                            b1.ToTable("couriers");

                            b1.WithOwner()
                                .HasForeignKey("CourierId")
                                .HasConstraintName("fk_couriers_couriers_id");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();
                });

            modelBuilder.Entity("Mtu.Rentals.Domain.Entities.Motorcycle", b =>
                {
                    b.OwnsOne("Mtu.Rentals.Domain.Entities.LicensePlate", "Plate", b1 =>
                        {
                            b1.Property<Guid>("MotorcycleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Normalized")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("plate_normalized");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("plate");

                            b1.HasKey("MotorcycleId");

                            b1.HasIndex("Normalized")
                                .IsUnique()
                                .HasDatabaseName("ix_motorcycles_plate_normalized");

                            b1.ToTable("motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleId")
                                .HasConstraintName("fk_motorcycles_motorcycles_id");
                        });

                    b.Navigation("Plate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
